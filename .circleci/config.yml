# build and deploy container to dockerhub
services:
  - docker

workflows: # Define a Workflow running the build job, then the deploy job
  version: 2
  build-deploy: # Make a workflow to build and deploy your project
    jobs:
      - build
      - deploy:
          requires:
            - build # Only run deploy job once the build job has completed
          filters:
            branches:
              only: main # Only deploy when the commit is on the Main branch

sudo: required
dist: xenial

jobs:
  build:
    docker:
      - image: circleci/python:3.8.6
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps: 
      - checkout
      - setup_remote_docker
      # pull the data from public osf repo
      # note that secure environment variables are set within travis
      - run: sudo pip3 install -U pip
      - run: sudo pip3 install osfclient
      - run: sudo pip3 install -U pyopenssl
      - run: export PYTHONHTTPSVERIFY=0
      - run: osf fetch fluency/transition_probs.csv data/transition_probs.csv
      # now lets build the container
      # - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make build
      # now test that it works by running the simulation
      - run: docker run adamnhornsby/fluency-model:latest python3 ./ fit all
  deploy:
    docker:
      - image: circleci/python:3.6.4
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps: 
      - checkout
      - setup_remote_docker
      # pull the data from public osf repo
      # note that secure environment variables are set within travis
      - run: sudo pip3 install -U pip
      - run: sudo pip3 install osfclient
      - run: sudo pip3 install -U pyopenssl
      - run: export PYTHONHTTPSVERIFY=0
      - run: osf fetch fluency/transition_probs.csv data/transition_probs.csv
      # now lets build the container
      # - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make build
      - run: make deploy